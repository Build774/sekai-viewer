{"version":3,"sources":["utils/index.ts","styles/layout.ts","components/subs/ContentTrans.tsx","components/subs/InfiniteScroll.tsx","components/ComicList.tsx"],"names":["useRefState","initialValue","useState","state","setState","stateRef","useRef","useEffect","current","masterDataCache","useCachedData","name","cached","cachedRef","setCached","fetchCached","useCallback","a","Axios","get","data","length","then","useRealtimeEventData","eventId","time","first10","rank20","rank30","rank40","rank50","rank100","rank200","rank300","rank400","rank500","rank1000","rank2000","rank3000","rank4000","rank5000","rank10000","rank20000","rank30000","rank40000","rank50000","rank100000","eventRealtimeData","eventRealtimeDataRef","setEventRealtimeData","Date","now","musicTagToName","all","vocaloid","light_music_club","idol","school_refusal","theme_park","street","useCharaName","contentTransMode","charas","useAssetI18n","assetT","assetI18n","charaId","chara","find","id","firstName","givenName","includes","language","useLayoutStyles","makeStyles","theme","header","fontWeight","content","marginTop","spacing","marginBottom","marginLeft","marginRight","ContentTrans","mode","contentKey","original","originalProps","translatedProps","assetTOptions","container","direction","color","CharaNameTrans","characterId","setChara","c","ReleaseCondTrans","releaseCondId","releaseConds","releaseCond","setReleaseCond","rc","i18nKey","releaseConditionType","Object","assign","level","releaseConditionTypeLevel","sentence","breakpoints","defaultGridSize","xs","md","InfiniteScroll","viewComponent","callback","gridSize","_gridSize","forEach","v","i","transformToCompleteGridSizeOptions","breakpoint","useTheme","map","useMediaQuery","down","Boolean","useBreakpoint","hasMore","setHasMore","observer","IntersectionObserver","entries","threshold","listElementRef","currentObserver","currentElement","observe","unobserve","itemsPerRow","numPlaceholders","key","item","sm","lg","xl","index","ref","style","display","paddingTop","Array","from","_","useStyles","media","backgroundSize","card","cursor","subheader","whiteSpace","overflow","textOverflow","textAlign","ComicList","classes","layoutClasses","t","useTranslation","useContext","SettingContext","getTranslated","tipsCache","comics","setComics","filteredCache","filteredCacheRef","setFilteredCache","page","pageRef","setPage","limit","limitRef","lastQueryFinRef","setLastQueryFin","isReadyRef","setIsReady","visible","setVisible","activeIdx","setActiveIdx","resourceLang","setResourceLang","getPaginatedTips","slice","comicImages","useMemo","comic","url","process","assetbundleName","src","alt","title","downloadUrl","document","filtered","filter","tip","tips","variant","className","justify","size","onClick","severity","href","textDecorationLine","fontSize","imageURL","width","margin","image","paddingBottom","isIntersecting","onClose","images","zIndex","activeIndex","downloadable","downloadInNewWindow","onMaskClick","onChange","idx","zoomSpeed"],"mappings":"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","file":"static/js/25.6e01cdb0.chunk.js","sourcesContent":["import { IUnitProfile } from \"./../types.d\";\nimport Axios from \"axios\";\nimport { useCallback, useEffect, useRef, useState } from \"react\";\nimport {\n  IGachaInfo,\n  ICardInfo,\n  IGameChara,\n  IMusicInfo,\n  ISkillInfo,\n  ICardRarity,\n  ICharacterRank,\n  IMusicVocalInfo,\n  IOutCharaProfile,\n  IUserInformationInfo,\n  IMusicDifficultyInfo,\n  IMusicTagInfo,\n  IReleaseCondition,\n  IMusicDanceMembers,\n  IEventInfo,\n  IEventDeckBonus,\n  IGameCharaUnit,\n  IEventRealtimeRank,\n  IResourceBoxInfo,\n  IHonorInfo,\n  ICardEpisode,\n  ContentTransModeType,\n  ITipInfo,\n  ICharaProfile,\n} from \"../types\";\nimport { useAssetI18n } from \"./i18n\";\n\nexport function useRefState<S>(\n  initialValue: S\n): [S, React.MutableRefObject<S>, React.Dispatch<React.SetStateAction<S>>] {\n  const [state, setState] = useState(initialValue);\n  const stateRef = useRef(state);\n  useEffect(() => {\n    stateRef.current = state;\n  }, [state]);\n  return [state, stateRef, setState];\n}\n\nlet masterDataCache: { [key: string]: any[] } = {};\n\nexport function useCachedData<\n  T extends\n    | IGachaInfo\n    | ICardInfo\n    | IGameChara\n    | IMusicInfo\n    | ISkillInfo\n    | ICardRarity\n    | ICharacterRank\n    | IMusicVocalInfo\n    | IOutCharaProfile\n    | IUserInformationInfo\n    | IMusicDifficultyInfo\n    | IMusicTagInfo\n    | IReleaseCondition\n    | IMusicDanceMembers\n    | IEventInfo\n    | IEventDeckBonus\n    | IGameCharaUnit\n    | IResourceBoxInfo\n    | IHonorInfo\n    | ICardEpisode\n    | ITipInfo\n    | ICharaProfile\n    | IUnitProfile\n>(name: string): [T[], React.MutableRefObject<T[]>] {\n  const [cached, cachedRef, setCached] = useRefState<T[]>([]);\n\n  const fetchCached = useCallback(async () => {\n    const { data }: { data: T[] } = await Axios.get(\n      `https://raw.githubusercontent.com/Sekai-World/sekai-master-db-diff/master/${name}.json`\n    );\n    return data;\n  }, [name]);\n\n  useEffect(() => {\n    if (masterDataCache[name] && masterDataCache[name].length)\n      setCached(masterDataCache[name]);\n    else\n      fetchCached().then((data) => {\n        setCached(data);\n        masterDataCache[name] = data;\n      });\n  }, [fetchCached, name, setCached]);\n\n  return [cached, cachedRef];\n}\n\nexport function useRealtimeEventData(\n  eventId: number\n): [\n  () => Promise<IEventRealtimeRank>,\n  IEventRealtimeRank,\n  React.MutableRefObject<IEventRealtimeRank>\n] {\n  const [\n    eventRealtimeData,\n    eventRealtimeDataRef,\n    setEventRealtimeData,\n  ] = useRefState<IEventRealtimeRank>({\n    time: 0,\n    first10: [],\n    rank20: [],\n    rank30: [],\n    rank40: [],\n    rank50: [],\n    rank100: [],\n    rank200: [],\n    rank300: [],\n    rank400: [],\n    rank500: [],\n    rank1000: [],\n    rank2000: [],\n    rank3000: [],\n    rank4000: [],\n    rank5000: [],\n    rank10000: [],\n    rank20000: [],\n    rank30000: [],\n    rank40000: [],\n    rank50000: [],\n    rank100000: [],\n  });\n\n  const refreshData = useCallback(async () => {\n    const { data }: { data: IEventRealtimeRank } = await Axios.get(\n      `https://bitbucket.org/sekai-world/sekai-event-track/raw/main/event${eventId}.json?t=${Date.now()}`\n    );\n\n    setEventRealtimeData(data);\n    return data;\n  }, [eventId, setEventRealtimeData]);\n\n  return [refreshData, eventRealtimeData, eventRealtimeDataRef];\n}\n\nexport const musicCategoryToName: { [key: string]: string } = {\n  mv: \"3D MV\",\n  original: \"Original MV\",\n  sekai: \"Sekai MV\",\n  image: \"Static Image\",\n  mv_2d: \"2D MV\",\n};\n\nexport const musicTagToName: { [key: string]: string } = {\n  all: \"All\",\n  vocaloid: \"Vocaloid\",\n  light_music_club: \"Light Music Club\",\n  idol: \"Idol\",\n  school_refusal: \"School Refusal\",\n  theme_park: \"Theme Park\",\n  street: \"Street\",\n};\n\nexport function useCharaName(contentTransMode: ContentTransModeType) {\n  const [charas] = useCachedData<IGameChara>(\"gameCharacters\");\n  const { assetT, assetI18n } = useAssetI18n();\n  return useCallback(\n    (charaId: number): string | undefined => {\n      const chara = charas.find((chara) => chara.id === charaId);\n      if (chara?.firstName) {\n        switch (contentTransMode) {\n          case \"original\":\n            return `${chara.firstName} ${chara.givenName}`;\n          case \"translated\":\n            return [\"zh-CN\", \"zh-TW\", \"ko\", \"ja\"].includes(assetI18n.language)\n              ? `${assetT(\n                  `character_name:${charaId}.firstName`,\n                  chara.firstName\n                )} ${assetT(\n                  `character_name:${charaId}.givenName`,\n                  chara.givenName\n                )}`\n              : `${assetT(\n                  `character_name:${charaId}.givenName`,\n                  chara.givenName\n                )} ${assetT(\n                  `character_name:${charaId}.firstName`,\n                  chara.firstName\n                )}`;\n          case \"both\":\n            return (\n              `${chara.firstName} ${chara.givenName} | ` +\n              ([\"zh-CN\", \"zh-TW\", \"ko\", \"ja\"].includes(assetI18n.language)\n                ? `${assetT(\n                    `character_name:${charaId}.firstName`,\n                    chara.firstName\n                  )} ${assetT(\n                    `character_name:${charaId}.givenName`,\n                    chara.givenName\n                  )}`\n                : `${assetT(\n                    `character_name:${charaId}.givenName`,\n                    chara.givenName\n                  )} ${assetT(\n                    `character_name:${charaId}.firstName`,\n                    chara.firstName\n                  )}`)\n            );\n        }\n      }\n      return chara?.givenName;\n    },\n    [assetI18n.language, assetT, charas, contentTransMode]\n  );\n}\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useLayoutStyles = makeStyles((theme) => ({\n  header: {\n    fontWeight: \"bold\",\n  },\n  content: {\n    marginTop: theme.spacing(3),\n    marginBottom: theme.spacing(3),\n    marginLeft: \"auto\",\n    marginRight: \"auto\",\n  },\n}));\n\nexport { useLayoutStyles };\n","import { Grid, Typography, TypographyProps } from \"@material-ui/core\";\nimport { StringMap, TOptions } from \"i18next\";\nimport React, { useEffect, useState } from \"react\";\nimport {\n  ContentTransModeType,\n  IGameChara,\n  IReleaseCondition,\n} from \"../../types\";\nimport { useCachedData } from \"../../utils\";\nimport { useAssetI18n } from \"../../utils/i18n\";\n\nexport const ContentTrans: React.FC<{\n  mode: ContentTransModeType;\n  contentKey: string;\n  original: string;\n  originalProps?: TypographyProps;\n  translatedProps?: TypographyProps;\n  assetTOptions?: string | TOptions<StringMap>;\n}> = ({\n  mode,\n  contentKey,\n  original,\n  originalProps,\n  translatedProps,\n  assetTOptions,\n}) => {\n  const { assetT } = useAssetI18n();\n  switch (mode) {\n    case \"original\":\n      return <Typography {...originalProps}>{original}</Typography>;\n    case \"translated\":\n      return (\n        <Typography {...translatedProps}>\n          {assetT(contentKey, original, assetTOptions)}\n        </Typography>\n      );\n    case \"both\":\n      return (\n        <Grid container direction=\"column\">\n          <Typography {...originalProps} color=\"textPrimary\">\n            {original}\n          </Typography>\n          <Typography {...translatedProps} color=\"textSecondary\">\n            {assetT(contentKey, original, assetTOptions)}\n          </Typography>\n        </Grid>\n      );\n  }\n};\n\nexport const CharaNameTrans: React.FC<{\n  mode: ContentTransModeType;\n  characterId: number;\n  originalProps?: TypographyProps;\n  translatedProps?: TypographyProps;\n  assetTOptions?: string | TOptions<StringMap>;\n}> = ({ mode, characterId, originalProps, translatedProps, assetTOptions }) => {\n  const [charas] = useCachedData<IGameChara>(\"gameCharacters\");\n  const { assetT, assetI18n } = useAssetI18n();\n\n  const [chara, setChara] = useState<IGameChara>();\n\n  useEffect(() => {\n    if (charas.length) {\n      setChara(charas.find((c) => c.id === characterId));\n    }\n  }, [charas, characterId]);\n\n  if (chara) {\n    switch (mode) {\n      case \"original\":\n        return (\n          <Typography {...originalProps}>\n            {chara.firstName} {chara.givenName}\n          </Typography>\n        );\n      case \"translated\":\n        return [\"zh-CN\", \"zh-TW\", \"ko\", \"ja\"].includes(assetI18n.language) ? (\n          <Typography {...translatedProps}>\n            {chara.firstName\n              ? assetT(\n                  `character_name:${characterId}.firstName`,\n                  chara.firstName,\n                  assetTOptions\n                )\n              : \"\"}{\" \"}\n            {assetT(\n              `character_name:${characterId}.givenName`,\n              chara.givenName,\n              assetTOptions\n            )}\n          </Typography>\n        ) : (\n          <Typography>\n            {assetT(\n              `character_name:${characterId}.givenName`,\n              chara.givenName,\n              assetTOptions\n            )}{\" \"}\n            {chara.firstName\n              ? assetT(\n                  `character_name:${characterId}.firstName`,\n                  chara.firstName,\n                  assetTOptions\n                )\n              : \"\"}\n          </Typography>\n        );\n      case \"both\":\n        return (\n          <Grid container direction=\"column\">\n            <Typography {...originalProps}>\n              {chara.firstName} {chara.givenName}\n            </Typography>\n            {[\"zh-CN\", \"zh-TW\", \"ko\", \"ja\"].includes(assetI18n.language) ? (\n              <Typography color=\"textSecondary\" {...translatedProps}>\n                {chara.firstName\n                  ? assetT(\n                      `character_name:${characterId}.firstName`,\n                      chara.firstName,\n                      assetTOptions\n                    )\n                  : \"\"}{\" \"}\n                {assetT(\n                  `character_name:${characterId}.givenName`,\n                  chara.givenName,\n                  assetTOptions\n                )}\n              </Typography>\n            ) : (\n              <Typography color=\"textSecondary\" {...translatedProps}>\n                {assetT(\n                  `character_name:${characterId}.givenName`,\n                  chara.givenName,\n                  assetTOptions\n                )}{\" \"}\n                {chara.firstName\n                  ? assetT(\n                      `character_name:${characterId}.firstName`,\n                      chara.firstName,\n                      assetTOptions\n                    )\n                  : \"\"}\n              </Typography>\n            )}\n          </Grid>\n        );\n    }\n  } else {\n    return <Typography></Typography>;\n  }\n};\n\nexport const ReleaseCondTrans: React.FC<{\n  mode: ContentTransModeType;\n  releaseCondId: number;\n  originalProps?: TypographyProps;\n  translatedProps?: TypographyProps;\n  assetTOptions?: string | TOptions<StringMap>;\n}> = ({\n  mode,\n  releaseCondId,\n  originalProps,\n  translatedProps,\n  assetTOptions,\n}) => {\n  const [releaseConds] = useCachedData<IReleaseCondition>(\"releaseConditions\");\n\n  const [releaseCond, setReleaseCond] = useState<IReleaseCondition>();\n\n  useEffect(() => {\n    if (releaseConds.length) {\n      setReleaseCond(releaseConds.find((rc) => rc.id === releaseCondId));\n    }\n  }, [releaseCondId, releaseConds]);\n\n  if (releaseCond) {\n    let i18nKey = \"\";\n    switch (releaseCond.releaseConditionType) {\n      case \"none\":\n        i18nKey = `release_cond:none_${releaseCond.id}`;\n        break;\n      case \"card_level\":\n        i18nKey = `release_cond:card_level`;\n        assetTOptions = Object.assign({}, assetTOptions, {\n          level: releaseCond.releaseConditionTypeLevel,\n        });\n        break;\n      default:\n        i18nKey = `release_cond:${releaseCond.releaseConditionType}`;\n        break;\n    }\n    return (\n      <ContentTrans\n        mode={mode}\n        contentKey={i18nKey}\n        original={releaseCond.sentence}\n        originalProps={originalProps}\n        translatedProps={translatedProps}\n        assetTOptions={assetTOptions}\n      />\n    );\n  } else {\n    return <div></div>;\n  }\n};\n","import {\n  // Box,\n  Grid,\n  // makeStyles,\n  useMediaQuery,\n  useTheme,\n} from \"@material-ui/core\";\nimport React, { Fragment, useEffect, useRef, useState } from \"react\";\n\n// only divisor of 12\ntype GridSize = 1 | 2 | 3 | 4 | 6 | 12 | undefined;\n\ninterface GridSizeOptions {\n  /**\n   * grid size for `xs` and wider (if not overridden) \\\n   * omit this property or set `undefined` to use default (12)\n   */\n  xs?: GridSize;\n  /**\n   * grid size for `sm` and wider (if not overridden) \\\n   * omit this property or set `undefined` to inherit from `xs` \\\n   */\n  sm?: GridSize;\n  /**\n   * grid size for `md` and wider (if not overridden) \\\n   * omit this property or set `undefined` to inherit from `sm` \\\n   */\n  md?: GridSize;\n  /**\n   * grid size for `lg` and wider (if not overridden) \\\n   * omit this property or set `undefined` to inherit from `md` \\\n   */\n  lg?: GridSize;\n  /**\n   * grid size for `xl` and wider \\\n   * omit this property or set `undefined` to inherit from `lg` \\\n   */\n  xl?: GridSize;\n}\n\ntype CompleteGridSizeOptions = {\n  [T in keyof Required<GridSizeOptions>]: Exclude<GridSize, undefined>;\n};\n\ninterface IISProps<T> {\n  readonly viewComponent: React.FC<{ data?: T; index?: number }>;\n  readonly callback: (\n    entries: readonly IntersectionObserverEntry[],\n    setHasMore: React.Dispatch<React.SetStateAction<boolean>>\n  ) => void;\n  readonly data: readonly T[];\n  readonly gridSize?: Readonly<GridSizeOptions>;\n}\n\n// NOTE: `breakpoints` must be sorted ascending by size\nconst breakpoints = [\"xs\", \"sm\", \"md\", \"lg\", \"xl\"] as const;\n\nconst defaultXSGridSize: GridSize = 12;\nconst defaultGridSize: Readonly<GridSizeOptions> = {\n  xs: defaultXSGridSize,\n  md: 4,\n};\n\nfunction useBreakpoint(): keyof GridSizeOptions {\n  const theme = useTheme();\n\n  // NOTE: The number of calls to `useMediaQuery` must always be constant.\n  // https://en.reactjs.org/docs/hooks-rules.html#only-call-hooks-at-the-top-level\n  const downBreakpoints = breakpoints.map(\n    (breakpoint) =>\n      // NOTE: `down` includes itself\n      // eslint-disable-next-line react-hooks/rules-of-hooks\n      useMediaQuery(theme.breakpoints.down(breakpoint)) && breakpoint\n  );\n\n  // NOTE: `down('xl')` always returns `true` so `|| breakpoints[breakpoints.length - 1]`\n  //       is not actually needed, but it's written for clarity and typing.\n  return downBreakpoints.find(Boolean) || breakpoints[breakpoints.length - 1];\n}\n\nfunction transformToCompleteGridSizeOptions(\n  _gridSize?: Readonly<GridSizeOptions> | undefined\n): CompleteGridSizeOptions {\n  // use default if gridSize is not provided\n  // not using defaults per properties because `{ md: 4 }` would not be desired\n  const gridSize = {\n    ...(_gridSize || defaultGridSize),\n  };\n\n  // inherit the value of the smaller breakpoint if not specified\n  breakpoints.forEach((v, i, a) => {\n    if (!gridSize[v]) {\n      gridSize[v] = i > 0 ? gridSize[a[i - 1]] : defaultXSGridSize;\n    }\n  });\n\n  return gridSize as CompleteGridSizeOptions;\n}\n\nfunction InfiniteScroll<T>({\n  viewComponent,\n  callback,\n  data,\n  gridSize: _gridSize,\n}: React.PropsWithChildren<IISProps<T>>): React.ReactElement<IISProps<T>> {\n  // this is necessary because of `viewGridSize`\n  const gridSize = transformToCompleteGridSizeOptions(_gridSize);\n\n  const breakpoint = useBreakpoint();\n\n  const [hasMore, setHasMore] = useState<boolean>(true);\n\n  const observer = useRef(\n    new IntersectionObserver((entries) => callback(entries, setHasMore), {\n      threshold: 0.5,\n    })\n  );\n  const listElementRef = useRef<HTMLDivElement>(null);\n\n  useEffect(() => {\n    setHasMore(true);\n  }, [data]);\n\n  useEffect(() => {\n    const currentObserver = observer.current;\n    const currentElement = listElementRef.current;\n    if (currentElement) currentObserver.observe(currentElement);\n\n    return () => {\n      if (currentElement) {\n        currentObserver.unobserve(currentElement);\n      }\n    };\n  });\n\n  const viewGridSize = gridSize[breakpoint];\n  const itemsPerRow = 12 / viewGridSize;\n  const numPlaceholders = data.length ? itemsPerRow : itemsPerRow * 2;\n\n  return (\n    <Fragment>\n      <Grid container direction=\"row\" spacing={1}>\n        {data.length\n          ? data.map((data, i) => (\n              <Grid\n                key={i}\n                item\n                xs={gridSize.xs}\n                sm={gridSize.sm}\n                md={gridSize.md}\n                lg={gridSize.lg}\n                xl={gridSize.xl}\n              >\n                {viewComponent({ data, index: i })}\n              </Grid>\n            ))\n          : null}\n      </Grid>\n      <Grid\n        container\n        direction=\"row\"\n        ref={listElementRef}\n        style={{ display: hasMore ? \"flex\" : \"none\", paddingTop: \"4px\" }}\n        spacing={1}\n      >\n        {Array.from({\n          length: numPlaceholders,\n        }).map((_, i) => (\n          <Grid\n            key={`empty-${i}`}\n            item\n            xs={gridSize.xs}\n            sm={gridSize.sm}\n            md={gridSize.md}\n            lg={gridSize.lg}\n            xl={gridSize.xl}\n          >\n            {viewComponent({})}\n          </Grid>\n        ))}\n      </Grid>\n    </Fragment>\n  );\n}\n\nexport default InfiniteScroll;\n","import {\n  Button,\n  ButtonGroup,\n  Card,\n  CardContent,\n  CardMedia,\n  Container,\n  Grid,\n  Link,\n  makeStyles,\n  Typography,\n} from \"@material-ui/core\";\nimport { Twitter } from \"@material-ui/icons\";\nimport { Alert, Skeleton } from \"@material-ui/lab\";\nimport React, {\n  Fragment,\n  useCallback,\n  useContext,\n  useEffect,\n  useMemo,\n  useState,\n} from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport Viewer from \"react-viewer\";\nimport { ImageDecorator } from \"react-viewer/lib/ViewerProps\";\nimport { SettingContext } from \"../context\";\nimport { useLayoutStyles } from \"../styles/layout\";\nimport { ITipInfo, ITipInfoComic } from \"../types\";\nimport { useCachedData, useRefState } from \"../utils\";\nimport { useAssetI18n } from \"../utils/i18n\";\nimport { ContentTrans } from \"./subs/ContentTrans\";\nimport InfiniteScroll from \"./subs/InfiniteScroll\";\n\nconst useStyles = makeStyles((theme) => ({\n  media: {\n    paddingTop: \"75%\",\n    backgroundSize: \"contain\",\n  },\n  card: {\n    // margin: theme.spacing(0.5),\n    cursor: \"pointer\",\n  },\n  subheader: {\n    whiteSpace: \"nowrap\",\n    overflow: \"hidden\",\n    textOverflow: \"ellipsis\",\n    textAlign: \"center\",\n  },\n}));\n\nconst ComicList: React.FC<{}> = () => {\n  const classes = useStyles();\n  const layoutClasses = useLayoutStyles();\n  const { t } = useTranslation();\n  const { contentTransMode } = useContext(SettingContext)!;\n  const { getTranslated } = useAssetI18n();\n\n  const [tipsCache] = useCachedData<ITipInfo>(\"tips\");\n\n  const [comics, setComics] = useState<ITipInfoComic[]>([]);\n  const [filteredCache, filteredCacheRef, setFilteredCache] = useRefState<\n    ITipInfoComic[]\n  >([]);\n\n  const [page, pageRef, setPage] = useRefState<number>(0);\n  const [limit, limitRef] = useRefState<number>(12);\n  const [, lastQueryFinRef, setLastQueryFin] = useRefState<boolean>(true);\n  const [, isReadyRef, setIsReady] = useRefState<boolean>(false);\n  const [visible, setVisible] = useState<boolean>(false);\n  const [activeIdx, setActiveIdx] = useState<number>(0);\n  const [resourceLang, setResourceLang] = useState<\"ja\" | \"fr\">(\"ja\");\n\n  const getPaginatedTips = useCallback(\n    (page: number, limit: number) => {\n      return filteredCache.slice(limit * (page - 1), limit * page);\n    },\n    [filteredCache]\n  );\n\n  const comicImages: ImageDecorator[] = useMemo(\n    () =>\n      filteredCache.map((comic) => {\n        let url;\n        switch (resourceLang) {\n          case \"ja\":\n            url = `${process.env.REACT_APP_ASSET_DOMAIN}/file/sekai-assets/comic/one_frame_rip/${comic.assetbundleName}.webp`;\n            break;\n          case \"fr\":\n            url = `${process.env.REACT_APP_ASSET_DOMAIN}/file/sekai-assets/comic_fr/${comic.assetbundleName}.png`;\n            break;\n        }\n        return {\n          src: url,\n          alt: getTranslated(\n            contentTransMode,\n            `comic_title:${comic.id}`,\n            comic.title\n          ),\n          downloadUrl: url,\n        };\n      }),\n    [filteredCache, contentTransMode, getTranslated, resourceLang]\n  );\n\n  const callback = (\n    entries: readonly IntersectionObserverEntry[],\n    setHasMore: React.Dispatch<React.SetStateAction<boolean>>\n  ) => {\n    if (!isReadyRef.current) return;\n    if (\n      entries[0].isIntersecting &&\n      lastQueryFinRef.current &&\n      (!filteredCacheRef.current.length ||\n        filteredCacheRef.current.length > pageRef.current * limitRef.current)\n    ) {\n      setPage((page) => page + 1);\n      setLastQueryFin(false);\n    } else if (\n      filteredCacheRef.current.length &&\n      filteredCacheRef.current.length <= pageRef.current * limitRef.current\n    ) {\n      setHasMore(false);\n    }\n  };\n\n  useEffect(() => {\n    document.title = t(\"title:comicList\");\n  }, [t]);\n\n  useEffect(() => {\n    if (tipsCache.length) {\n      const filtered = tipsCache.filter(\n        (tip): tip is ITipInfoComic => \"assetbundleName\" in tip\n      );\n      setFilteredCache(filtered);\n      setComics([]);\n      setPage(0);\n    }\n  }, [tipsCache, setComics, setPage, setFilteredCache]);\n\n  useEffect(() => {\n    setComics((tips) => [...tips, ...getPaginatedTips(page, limit)]);\n    setLastQueryFin(true);\n  }, [page, limit, tipsCache, setLastQueryFin, getPaginatedTips]);\n\n  useEffect(() => {\n    setIsReady(Boolean(tipsCache.length));\n  }, [setIsReady, tipsCache]);\n\n  const ListCard: React.FC<{ data?: ITipInfoComic; index?: number }> = ({\n    data,\n    index,\n  }) => {\n    if (!data) {\n      // loading\n      return (\n        <Card className={classes.card}>\n          <Skeleton variant=\"rect\" className={classes.media}></Skeleton>\n          <CardContent>\n            <Typography variant=\"subtitle1\" className={classes.subheader}>\n              <Skeleton\n                variant=\"text\"\n                width=\"90%\"\n                style={{ margin: \"auto\" }}\n              ></Skeleton>\n            </Typography>\n          </CardContent>\n        </Card>\n      );\n    }\n    let imageURL;\n    switch (resourceLang) {\n      case \"ja\":\n        imageURL = `${process.env.REACT_APP_ASSET_DOMAIN}/file/sekai-assets/comic/one_frame_rip/${data.assetbundleName}.webp`;\n        break;\n      case \"fr\":\n        imageURL = `${process.env.REACT_APP_ASSET_DOMAIN}/file/sekai-assets/comic_fr/${data.assetbundleName}.png`;\n        break;\n    }\n    return (\n      <Card\n        className={classes.card}\n        onClick={() => {\n          setActiveIdx(index!);\n          setVisible(true);\n        }}\n      >\n        <CardMedia\n          className={classes.media}\n          image={imageURL}\n          title={data.title}\n        ></CardMedia>\n        <CardContent style={{ paddingBottom: \"16px\" }}>\n          <ContentTrans\n            mode={contentTransMode}\n            contentKey={`comic_title:${data.id}`}\n            original={data.title}\n            originalProps={{\n              variant: \"subtitle1\",\n            }}\n            translatedProps={{\n              variant: \"subtitle1\",\n            }}\n          />\n        </CardContent>\n      </Card>\n    );\n  };\n\n  return (\n    <Fragment>\n      <Typography variant=\"h6\" className={layoutClasses.header}>\n        {t(\"common:comic\")}\n      </Typography>\n      <Container className={layoutClasses.content}>\n        <Grid container justify=\"space-between\">\n          <ButtonGroup style={{ marginBottom: \"1%\" }}>\n            <Button\n              size=\"medium\"\n              color={resourceLang === \"ja\" ? \"secondary\" : \"primary\"}\n              onClick={() => setResourceLang(\"ja\")}\n            >\n              <Typography>JA</Typography>\n            </Button>\n            <Button\n              size=\"medium\"\n              color={resourceLang === \"fr\" ? \"secondary\" : \"primary\"}\n              onClick={() => setResourceLang(\"fr\")}\n            >\n              <Typography>FR</Typography>\n            </Button>\n          </ButtonGroup>\n        </Grid>\n        {resourceLang === \"fr\" ? (\n          <Alert severity=\"info\">\n            <Typography>\n              Credit: Yasito (\n              <Link\n                href=\"https://twitter.com/pjsekai_fra\"\n                style={{ textDecorationLine: \"none\" }}\n              >\n                <Twitter fontSize=\"inherit\" /> @pjsekai_fra\n              </Link>\n              )\n            </Typography>\n          </Alert>\n        ) : null}\n        {InfiniteScroll<ITipInfoComic>({\n          viewComponent: ListCard,\n          callback,\n          data: comics,\n          gridSize: {\n            xs: 12,\n            md: 4,\n            lg: 3,\n          },\n        })}\n      </Container>\n      <Viewer\n        visible={visible}\n        onClose={() => setVisible(false)}\n        images={comicImages}\n        zIndex={2000}\n        activeIndex={activeIdx}\n        downloadable\n        downloadInNewWindow\n        onMaskClick={() => setVisible(false)}\n        onChange={(_, idx) => setActiveIdx(idx)}\n        zoomSpeed={0.25}\n      />\n    </Fragment>\n  );\n};\n\nexport default ComicList;\n"],"sourceRoot":""}